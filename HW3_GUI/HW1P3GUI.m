function fig_hdl = HW1P3GUI

% Initialize handles structure
handles = struct();

% Create all UI controls
build_gui();

% Assign function output
fig_hdl = handles.figure1;

%% ---------------------------------------------------------------------------
    function build_gui()
        % Creation of all uicontrols
        
        % Get size of screen in pixels
        set(0,'units','pixels')
        Pix_SS = get(0,'screensize');
        % Adjust display to these dimensions
        xmult = Pix_SS(3)/1280; % originally was on 1280x800 display, so need to adjust for current size NOTE: may not work well for displays smaller than a 13" Macbook w/o retina display
        ymult = Pix_SS(4)/800;
        ppinv = [1*xmult 1*ymult 1*xmult 1*ymult];
        
        handles.count = 0;
        
        % --- FIGURE -------------------------------------
        handles.figure1 = figure( ...
            'Tag', 'figure1', ...
            'Units', 'characters', ...
            'Position', ppinv.*[80 30 125 35], ...
            'Name', 'CEE287 HW1 Response Spectrum Calculator', ...
            'MenuBar', 'none', ...
            'NumberTitle', 'off', ...
            'Color', [1 1 1]);
        
        % --- PANELS -------------------------------------
        handles.TOPPANEL = uipanel( ...
            'Parent', handles.figure1, ...
            'Tag', 'TOPPANEL', ...
            'Units', 'characters', ...
            'Position', ppinv.*[0 25 125 10], ...
            'FontName', 'Helvetica', ...
            'FontSize', 10, ...
            'BackgroundColor', [1 1 1], ...
            'Title', '', ...
            'BorderType', 'none');
        
        handles.LEFTPANEL = uipanel( ...
            'Parent', handles.figure1, ...
            'Tag', 'LEFTPANEL', ...
            'Units', 'characters', ...
            'Position', ppinv.*[2 0 28 25], ...
            'FontName', 'Helvetica', ...
            'FontSize', 10, ...
            'BackgroundColor', [1 1 1], ...
            'Title', '', ...
            'BorderType', 'none');
        
        handles.BUTTONPANEL = uibuttongroup( ...
            'Parent', handles.LEFTPANEL, ...
            'Tag', 'BUTTONPANEL', ...
            'Units', 'characters', ...
            'Position', ppinv.*[0.3 4.5 24 5], ...
            'FontName', 'Helvetica', ...
            'FontSize', 10, ...
            'BackgroundColor', [1 1 1], ...
            'Title', 'Response Spectrum:', ...
            'BorderType', 'none');
        
        % --- AXES -------------------------------------
        handles.logoaxes = axes( ...
            'Parent', handles.TOPPANEL, ...
            'Tag', 'logoaxes', ...
            'Units', 'characters', ...
            'Color', [1 1 1], ...
            'Position', ppinv.*[4 0 22.5 9.5]);
        
        slogo = imread('StanfordBlackWhiteSeal.png');
        image(slogo, 'Parent', handles.logoaxes);
        set(gca, 'Visible', 'off');
        
        handles.mainaxes = axes( ...
            'Parent', handles.figure1, ...
            'Tag', 'mainaxes', ...
            'Units', 'characters', ...
            'Visible', 'off',...
            'Position', ppinv.*[42 4 76 20]);
        
        % --- STATIC TEXTS -------------------------------------
        handles.header = uicontrol( ...
            'Parent', handles.TOPPANEL, ...
            'Tag', 'header', ...
            'Style', 'text', ...
            'Units', 'characters', ...
            'Position', ppinv.*[35 6.5 50 2], ...
            'FontName', 'Helvetica', ...
            'FontSize', 14, ...
            'FontWeight', 'bold', ...
            'BackgroundColor', [1 1 1], ...
            'String', 'SDOF Response Spectrum Calculator', ...
            'HorizontalAlignment', 'left');
        
        handles.subtitle = uicontrol( ...
            'Parent', handles.TOPPANEL, ...
            'Tag', 'subtitle', ...
            'Style', 'text', ...
            'Units', 'characters', ...
            'Position', ppinv.*[35 3 70 4], ...
            'FontName', 'Helvetica', ...
            'FontSize', 10, ...
            'BackgroundColor', [1 1 1], ...
            'String', {'Created by Max Ferguson and Nicole Paul','CEE287 Assignment 1','March 31, 2015'}, ...
            'HorizontalAlignment', 'left');
        
        handles.text1 = uicontrol( ...
            'Parent', handles.LEFTPANEL, ...
            'Tag', 'text1', ...
            'Style', 'text', ...
            'Units', 'characters', ...
            'Position', ppinv.*[1.5 22 18.5 1], ...
            'FontName', 'Helvetica', ...
            'FontSize', 10, ...
            'BackgroundColor', [1 1 1], ...
            'String', 'Ground Motion Record:', ...
            'HorizontalAlignment', 'left');
        
        handles.text2 = uicontrol( ...
            'Parent', handles.LEFTPANEL, ...
            'Tag', 'text2', ...
            'Style', 'text', ...
            'Units', 'characters', ...
            'Position', ppinv.*[1.5 15 18.5 1], ...
            'FontName', 'Helvetica', ...
            'FontSize', 10, ...
            'BackgroundColor', [1 1 1], ...
            'String', 'Factor to Convert to g:', ...
            'HorizontalAlignment', 'left');
        
        handles.text3 = uicontrol( ...
            'Parent', handles.LEFTPANEL, ...
            'Tag', 'text3', ...
            'Style', 'text', ...
            'Units', 'characters', ...
            'Position', ppinv.*[1.3 12 18.5 1], ...
            'FontName', 'Helvetica', ...
            'FontSize', 10, ...
            'BackgroundColor', [1 1 1], ...
            'String', 'Damping Ratio:', ...
            'HorizontalAlignment', 'left');
        
        % --- RADIO BUTTONS -------------------------------------
        handles.pseudo = uicontrol( ...
            'Parent', handles.BUTTONPANEL, ...
            'Tag', 'pseudo', ...
            'Style', 'radiobutton', ...
            'Units', 'characters', ...
            'Position', ppinv.*[2 2 22 2], ...
            'FontName', 'Helvetica', ...
            'FontSize', 10, ...
            'String', 'Pseudo Acceleration');
        
        handles.reldisplacement = uicontrol( ...
            'Parent', handles.BUTTONPANEL, ...
            'Tag', 'reldisplacement', ...
            'Style', 'radiobutton', ...
            'Units', 'characters', ...
            'Position', ppinv.*[2 0.5 22 2], ...
            'FontName', 'Helvetica', ...
            'FontSize', 10, ...
            'String', 'Relative Displacement');
        
        % --- EDIT TEXTS -------------------------------------
        handles.convtog = uicontrol( ...
            'Parent', handles.LEFTPANEL, ...
            'Tag', 'convtog', ...
            'Style', 'edit', ...
            'Units', 'characters', ...
            'Position', ppinv.*[1.5 13 10 1.8], ...
            'FontName', 'Helvetica', ...
            'FontSize', 10, ...
            'BackgroundColor', [1 1 1], ...
            'String', '0.00102');
        
        handles.dampingratio = uicontrol( ...
            'Parent', handles.LEFTPANEL, ...
            'Tag', 'dampingratio', ...
            'Style', 'edit', ...
            'Units', 'characters', ...
            'Position', ppinv.*[1.5 10 10 1.8], ...
            'FontName', 'Helvetica', ...
            'FontSize', 10, ...
            'BackgroundColor', [1 1 1], ...
            'String', '0.05');
        
        % --- LISTBOXES -------------------------------------
        
        % -- GM RECORDS LIST
        direc = 'GMs';
        FileList = dir(fullfile(direc));
        N = numel(FileList);
        if N > 2
            gmstr = cell(N-2, 1);
            for i = 3:N
                gmstr{i-2} = FileList(i).name;
            end
        else
            gmstr = 'No ground motion records available...';
        end
        
        
        handles.listbox1 = uicontrol( ...
            'Parent', handles.LEFTPANEL, ...
            'Tag', 'listbox1', ...
            'Style', 'listbox', ...
            'Units', 'characters', ...
            'Position', ppinv.*[1.5 16.7 28 5], ...
            'BackgroundColor', [1 1 1], ...
            'FontName', 'Helvetica', ...
            'FontSize', 10, ...
            'String', gmstr);
        
        
        % --- PUSHBUTTONS -------------------------------------
        
        handles.addplot = uicontrol( ...
			'Parent', handles.LEFTPANEL, ...
			'Tag', 'setnfloor', ...
			'Style', 'pushbutton', ...
			'Units', 'characters', ...
			'Position', ppinv.*[2 2.5 10 1.5], ...
			'FontName', 'Helvetica', ...
			'FontSize', 10, ...
			'BackgroundColor', [1 1 1], ...
			'String', 'Add Plot', ...
			'Callback', @addplot_Callback);
        
        handles.calculate = uicontrol( ...
			'Parent', handles.LEFTPANEL, ...
			'Tag', 'setnfloor', ...
			'Style', 'pushbutton', ...
			'Units', 'characters', ...
			'Position', ppinv.*[14 2.5 10 1.5], ...
			'FontName', 'Helvetica', ...
			'FontSize', 10, ...
			'BackgroundColor', [1 1 1], ...
			'String', 'Calculate', ...
			'Callback', @calculate_Callback);
        
        
    end

%% ---------------------------------------------------------------------------
    function addplot_Callback(hObject,evendata) %#ok<INUSD>
        
        % Updating count of spectra
        handles.count = handles.count + 1;
        
        % Loading data
        gmno = get(handles.listbox1, 'Value');
        gmstr = get(handles.listbox1, 'str');
        gmchoice = gmstr{gmno};
        datfull = load(fullfile('GMs',gmchoice));
        datfields = fieldnames(datfull);
        dat = datfull.(datfields{1});
        
        % Interpreting data
        t = dat(:,1);
        dt = t(2) - t(1); % NOTE: Assumes constant timestep across data
        A = dat(:,2);
        
        % Loading other inputs
        E = str2double(get(handles.dampingratio,'str'));
        uflag = get(handles.reldisplacement,'Value'); % NOTE: uflag of 1 means plot rel disp, otherwise pseudo accel
        convg = str2double(get(handles.convtog,'str'));
        
        % Assumptions
        u0 = 0;
        v0 = 0;
        handles.Tn = (0.05:0.05:3)';
        
        % Calculating response spectrum
        for i = 1:numel(handles.Tn)
            [~,~,~,handles.Sd(i,handles.count),~,~,~,handles.PSa(i,handles.count)] = RecurrenceSDOF(handles.Tn(i),E,A*convg,dt,u0,v0);
        end
        
        % Creating color cell - NOTE: currently only works for 5 GM
        colorcell = {'r','m','g','b','c'};
        
        % Plotting appropriate results
        if uflag
            % Plot relative displacement
            plot(handles.mainaxes,handles.Tn,handles.Sd(:,handles.count),strcat(colorcell{handles.count},'*-'),'DisplayName',datfields{1}); grid on; hold on;
            xlabel('Period, T [s]');
            ylabel('Relative Spectral Displacement [in]');
            title('Response Spectrum for SDOF System');
            legend('-DynamicLegend','Location','best');
        else
            % Plot pseudo absolute acceleration
            plot(handles.mainaxes,handles.Tn,handles.PSa(:,handles.count),strcat(colorcell{handles.count},'*-'),'DisplayName',datfields{1}); grid on; hold on;
            xlabel('Period, T [s]');
            ylabel('Absolute Pseudo Acceleration [g]');
            title('Response Spectrum for SDOF System');
            legend('-DynamicLegend','Location','best');
        end
        

        
    end

%% ---------------------------------------------------------------------------
    function calculate_Callback(hObject,evendata) %#ok<INUSD>
        
        uflag = get(handles.reldisplacement,'Value'); % NOTE: uflag of 1 means plot rel disp, otherwise pseudo accel
        
        % Plot mean
        if uflag
            % Plot relative displacement
            plot(handles.mainaxes,handles.Tn,mean(handles.Sd,2),'k--','LineWidth',2,'DisplayName','Mean'); grid on; hold on;
            xlabel('Period, T [s]');
            ylabel('Relative Spectral Displacement [in]');
            title('Response Spectrum for SDOF System');
            legend('-DynamicLegend','Location','best');
            
            % Create figure for the logarithmic standard deviation
            sig_Y = std(handles.Sd,0,2);
            mu_Y = mean(handles.Sd,2);
            sig_lnY = sqrt(log(1+(sig_Y./mu_Y).^2));
            
            set(0,'defaultFigureColor', [1 1 1]);
            figure;
            plot(handles.Tn, sig_lnY,'*-'); grid on;
            xlabel('Period, T [s]');
            ylabel('\sigma_{ln} of Spectral Displacement');
            title('Variation of S_d Uncertainty with Period');
            
            save LPRecurrenceData
            
        else
            % Plot pseudo absolute acceleration
            plot(handles.mainaxes,handles.Tn,mean(handles.PSa,2),'k--','LineWidth',2,'DisplayName','Mean'); grid on; hold on;
            xlabel('Period, T [s]');
            ylabel('Absolute Pseudo Acceleration [g]');
            title('Response Spectrum for SDOF System');
            legend('-DynamicLegend','Location','best');
            
            % Create figure for the logarithmic standard deviation
            sig_Y = std(handles.PSa,0,2);
            mu_Y = mean(handles.PSa,2);
            sig_lnY = sqrt(log(1+(sig_Y./mu_Y).^2));
            
            set(0,'defaultFigureColor', [1 1 1]);
            figure;
            plot(handles.Tn, sig_lnY,'*-'); grid on;
            xlabel('Period, T [s]');
            ylabel('\sigma_{ln} of Pseudo Acceleration');
            title('Variation of PS_a Uncertainty with Period');
            
            save LPRecurrenceData
        end
       
        
        
    end



end
